#include <PID_v1.h>
#define TRIGGER 7
#define ECHO 7
#define MOTOR_LEFT 8 
#define MOTOR_RIGHT 9
#define MOTOR_SPEED 10

int cm = 0;
int Velocity;
double distance; // distance read by the sensor
double PIDinput, PIDoutput, PIDsetpoint; // variables for PID controller
double Kp, Ki, Kd; // PID parameters
PID PID1(&PIDinput, &PIDoutput, &PIDsetpoint, Kp, Ki, Kd); 

long readUltrasonicDistance(int triggerPin, int echoPin)
{
  pinMode(triggerPin, OUTPUT);  // Clear the trigger
  digitalWrite(triggerPin, LOW);
  delayMicroseconds(2);
  // Sets the trigger pin to HIGH state for 10 microseconds
  digitalWrite(triggerPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(triggerPin, LOW);
  pinMode(echoPin, INPUT);
  // Reads the echo pin, and returns the sound wave travel time in microseconds
  return pulseIn(echoPin, HIGH);
}

void setup()
{
  Kp = 1.8;
  Ki = 10; 
  Kd = 2;
  pinMode(MOTOR_LEFT, OUTPUT);
  pinMode(MOTOR_RIGHT, OUTPUT);
  pinMode(MOTOR_SPEED, OUTPUT);
  PIDsetpoint = 30; // setpoint of motor distance
  Serial.begin(9600);

}

void loop()
{
  // measure the ping time in cm
  distance = 0.01723 * readUltrasonicDistance(7, 7);
  PIDinput = distance; // setting PID input - actual distance of motor
  PID1.Compute(); // calculate parameters
  Velocity = PIDoutput; // set motor velocity
  
  // Setting motor direction
  if(distance < PIDsetpoint){
  	digitalWrite(MOTOR_LEFT, LOW);
    digitalWrite(MOTOR_RIGHT,HIGH); // set motor direction to right
    analogWrite(MOTOR_SPEED, Velocity); // PWM signal for motor speed
    delay(20);
  }else{
  digitalWrite(MOTOR_RIGHT, LOW);
    digitalWrite(MOTOR_LEFT,HIGH); // set motor direction to left
    analogWrite(MOTOR_SPEED, Velocity); // PWM signal for motor speed
    delay(20);
  }
  
  // Setting PWM signal limits
  if(Velocity >= 255){
  	Velocity = 255;
  }else if(Velocity <= -255){
    Velocity = -255;
  }
  
}